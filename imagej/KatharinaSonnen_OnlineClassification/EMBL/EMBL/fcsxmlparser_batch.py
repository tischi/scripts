'''
fcsxmlparser_batch
reads xml file generated by ZEN macro in automatic FCS pipeline
show image with points where FCS has been acquired. 
Optionally one can specify which channel to show, base 1
	./ImageJ-win64.exe -macro path_to_fcsxmlparser 'xmlfilename'
    ./ImageJ-win64.exe -macro path_to_fcsxmlparser 'xmlfilename -cchannelNr'

EMBL, March, 2015
Antonio Politi
'''


import ij
import re
from ij.gui import PointRoi
from ij.plugin.frame import RoiManager
from ij.process import ImageConverter
from loci.plugins import BF
import os
from ij import IJ, ImagePlus
from xml.etree import ElementTree as ET
from javax.swing import (BoxLayout,  ImageIcon, JButton, JRadioButton, ButtonGroup, JFrame, JPanel,
 JSeparator,
		JPasswordField, JLabel, JTextArea, JTextField, JScrollPane, JCheckBox, 
		SwingConstants, WindowConstants, SpringLayout, Box, JComboBox, JSeparator, BorderFactory)

class FcsImageShow(object):
	fcsimages = []
	idximg = -1
	def __init__(self):
		self.frameMain = JFrame('Open next image',
			defaultCloseOperation = JFrame.DISPOSE_ON_CLOSE,
			size = (300, 300)
		)
		pane = self.frameMain.getContentPane()
		panel = JPanel()
		panel.setLayout(BoxLayout(panel, BoxLayout.LINE_AXIS))
		panel.add(JButton('Next', actionPerformed=self.next))
		panel.add(JButton('Previous', actionPerformed=self.prev))
		pane.add(panel)
		self.frameMain.visible = 1
		
		#resfile = 'X:\\AntonioP_t2\\RLadurner_JMPeters\\DoubleArrest_Noc\\150130_STAG2\\two-comp-fit.res'
		
		#resfile = 'X:\\AntonioP_t2\\RLadurner_JMPeters\\DoubleArrest\\150120_STAG2\\two-comp-fit.res'
		resfile = 'X:\\AntonioP_t2\\RLadurner_JMPeters\\DoubleArrest_Noc\\150130_STAG2\\two-comp-fit.csv'
		#resfile = 'X:\\AntonioP_t2\\RLadurner_JMPeters\\DoubleArrest\\150120_STAG2\\FcsResults\\2c_LSM1_STAG2-mEGFP_H2B-mCherry.res'
		self.loadResultsFile(resfile)
		self.mygen = iter(self.fcsimages)
	

	def getPosition(self, xmlfile):
		''' Parse xml file for position of points and imgName. Returns a dictionary and imgName'''
		obj = {}
		tree = ET.parse(xmlfile)
		root = tree.getroot()
		for child in root:
			if child.tag == 'Image':
				imgName = os.path.join(os.path.dirname(xmlfile), os.path.basename(child.attrib['Name']))
				#legacy code
				fileName, fileExtension = os.path.splitext(imgName)
				if not fileExtension == '.czi' or not fileExtension == '.lsm':
					imgName = imgName + ".lsm"
			if child.tag == 'object':
				pos = [0, 0, 0]
				for nef in child:
					if nef.tag == 'x':
						pos[0] = int(nef.text)
					if nef.tag == 'y':
						pos[1] = int(nef.text)
					if nef.tag == 'z':
						pos[2] = int(nef.text)
				obj[int(child.attrib['ID'])] = pos
		return obj, imgName
		
	def loadResultsFile(self, resfile):
		my_file = open(resfile, 'r')
		my_file.seek(0)
		for line in my_file:
			tabLine = line.split('\t')
			if tabLine[0].isdigit():
				#first pt
				if re.search( 'R\d_P(\d)_K\d_Ch\d-Ch\d.zen', tabLine[1]).group(1) == '1':
					
					filename =  re.split('_R\d_P(\d)_K\d_Ch\d-Ch\d.zen', os.path.basename(tabLine[2]))[0] + '.xml'
					dirName = os.path.dirname(tabLine[2])
				
					dirName = dirName.replace("Z:", "X:")
					dirName = dirName.replace("Y:", "X:")
					
					filename = os.path.join(dirName,filename)
					
					fcspts, imgName = self.getPosition(filename)
					self.fcsimages.append([fcspts, imgName])


	
	def next(self, event):
		if self.idximg < -1:
			self.idximg = 0
		if self.idximg > len(self.fcsimages):
			self.idximg = len(self.fcsimages)
		else:
			self.idximg += 1
		print self.idximg
		self.showimage()
		
	def prev(self, event):
		if self.idximg <= 0:
			self.idximg = 0
		else:
			self.idximg -= 1
		self.showimage()
		
	def showimage(self):
		roim = RoiManager.getInstance()
		if roim is None:
			roim = RoiManager()
		IJ.run("Close All")
		IJ.run("Clear Results")
		try:
			roim.reset()
		except AttributeError:
			roim.runCommand("reset")
		obj = self.fcsimages[self.idximg][0]
		imgName = self.fcsimages[self.idximg][1]

		img =  BF.openImagePlus(imgName)[0]
		img.setZ(obj[1][2]+1)
		img.setC(3)
		IJ.run(img, "Grays", "");
		img.setC(1)
		img.show()

		#draw rois
		for i in range(1, len(obj)+1):
			PR = PointRoi(obj[i][0],obj[i][1])
			try:
				PR.setSize(3)
				PR.setPointType(0)
				roim.addRoi(PR)
			except:
				roim.addRoi(PR)
		roim.runCommand('Show All with Labels')

FcsImageShow()

def loadResultsFile(resfile):
	my_file = open(resfile, 'r')
	my_file.seek(0)
	for line in my_file:
		tabLine = line.split('\t')
		if tabLine[0].isdigit():
			#first pt
			if re.search( 'R\d_P(\d)_K\d_Ch\d-Ch\d.zen', tabLine[1]).group(1) == '1':
				filename =  re.split('_R\d_P(\d)_K\d_Ch\d-Ch\d.zen', os.path.basename(tabLine[2]))[0] + '.xml'
				dirName = os.path.dirname(tabLine[2])
				dirName = dirName.replace("Z:", "X:")
				filename = os.path.join(dirName,filename)
				obj, imgName = getPosition(filename)
				img =  BF.openImagePlus(imgName)[0]
				img.show()

			
	#while (line = my_file.readline()):
	#	print "aline"
	print "finished"
	my_file.close()
	


#resfile = 'X:\\AntonioP_t2\\RLadurner_JMPeters\\DoubleArrest\\150120_STAG2\\two-comp-fit.res'
#loadResultsFile(resfile)

'''
#close all open files and clean roimanager
roim = RoiManager.getInstance()
if roim is None:
	roim = RoiManager()
IJ.run("Close All")
IJ.run("Clear Results")
try:
	roim.reset()
except AttributeError:
	roim.runCommand("reset")
	
#read argument when called from command line
try:
	arg = getArgument()
except:
	IJ.log(" ")
	IJ.log("Error in loading the file! Using default file!")
	IJ.log("Run macroscript: ./ImageJ-win64.exe -macro fcsxmlparser 'xmlfilename'")
	IJ.log("or               ./ImageJ-win64.exe -macro fcsxmlparser 'xmlfilename -cchannelNr'")
	arg = 'X:\\AntonioP_t2\\RLadurner_JMPeters\\DoubleArrest\\150212_STAG2\\Mitosys2\\LSM\\DE_W0001_P0001\\DE_2_W0001_P0001_T0001\\TR1_W0001_P0001\\TR1_2_W0001_P0001_T0001.xml -c2'

#split for channel argument
arg = re.split('\s+-c', arg)
if len(arg)>1:
	xmlfile = arg[0]
	ch = int(arg[1])
else:
	xmlfile = arg[0]
	ch = 1

#open xml file and parse it
tree = ET.parse(xmlfile)
root = tree.getroot()
obj, imgName = getPosition(root)
print imgName

#open image
img =  BF.openImagePlus(imgName)[0] 
img.setZ(obj[1][2]+1)
img.setC(int(ch))
img.show()


#draw rois
for i in range(1, len(obj)+1):
	PR = PointRoi(obj[i][0],obj[i][1])
	try:
		PR.setSize(3)
		PR.setPointType(0)
		roim.addRoi(PR)
	except:
		roim.addRoi(PR)

roim.runCommand('Show All with Labels')
'''


